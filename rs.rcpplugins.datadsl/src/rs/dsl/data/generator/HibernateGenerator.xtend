/*
 * generated by Xtext
 */
package rs.dsl.data.generator

import com.google.inject.Inject
import java.io.Serializable
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.xbase.compiler.ImportManager
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import rs.dsl.data.dataDsl.Entity
import rs.dsl.data.dataDsl.FactoryDefinition
import rs.dsl.data.dataDsl.Feature
import rs.dsl.data.dataDsl.PackageDeclaration
import java.util.Map
import java.util.HashMap
import rs.data.impl.AbstractDaoFactory
import rs.data.impl.dto.LongDTO
import rs.data.impl.dto.GeneralDTO
import rs.data.impl.dto.StringDTO
import rs.data.hibernate.bo.AbstractHibernateBO
import rs.data.hibernate.bo.AbstractHibernateLongBO
import rs.data.hibernate.bo.AbstractHibernateStringBO
import rs.data.hibernate.dao.AbstractHibernateLongDAO
import rs.data.hibernate.dao.AbstractHibernateDAO
import rs.data.hibernate.dao.AbstractHibernateStringDAO

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class HibernateGenerator extends AbstractDataGenerator {
	
	@Inject extension JvmTypesBuilder
	
	private Map<String, Entity> entities = new HashMap<String,Entity>()
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e: resource.allContents.toIterable.filter(Entity)) {
			entities.put(getInterfaceName(e), e)
			if (isHibernate(e)) {
				fsa.generateFile(getFilename(getDtoName(e)), e.compileDto)
				fsa.generateFile(getFilename(getImplementationName(e)), e.compileImplementation)
				fsa.generateFile(getFilename(getDaoImplementationName(e)), e.compileDaoImplementation)
				// TODO: HBM files
			}
		}
		for (f: resource.allContents.toIterable.filter(FactoryDefinition)) {
			if (isHibernate(f)) {
				fsa.generateFile(getFilename(getFactoryImplementationName(f)), f.compileFactoryImplementation)
			}
		}
	}
	
	/**************************** DTO Implementation *******************************/
	
	def compileDto(Entity e) ''' 
    «val importManager = new ImportManager(true)» 
    «val body = dtoBody(e, importManager)»
    package «getPackageName(getDtoName(e))»;
    
    «FOR i:importManager.imports»
    import «i»;
    «ENDFOR»
    
    «body»
  	'''
  
  	def dtoBody(Entity e, ImportManager importManager) {
  		var String superType = null
  		var String parameter = null
  		var String abstractOption = "";
  		if (e.options.contains("abstract")) abstractOption = "abstract "
  		if (e.superTypes != null) {
  			for (s : e.superTypes) {
				if (s.identifier == 'rs.data.api.bo.ILongBO') {
					superType = getTypeName(e.newTypeRef(LongDTO), importManager)
				} else if (s.identifier == 'rs.data.api.bo.IGeneralBO') {
					superType = getTypeName(e.newTypeRef(GeneralDTO, e.newTypeRef("K")), importManager)
					parameter = "K extends "+getTypeName(e.newTypeRef(Serializable), importManager)
				} else if (s.identifier == 'rs.data.api.bo.IStringBO') {
					superType = getTypeName(e.newTypeRef(StringDTO), importManager)
				} else if (entities.containsKey(s.identifier)) {
					superType = getTypeName(e.newTypeRef(getDtoName(entities.get(s.identifier))), importManager)
				}
  			}
  		}
  		if (parameter != null) parameter = '<' + parameter + '>'
  		else parameter = ''
  		if (superType != null) superType = " extends "+superType
'''
/** 
  * DTO implementation for {@link «getInterfaceName(e)»}.
  * <p>«e.documentation»</p> 
  */
public «abstractOption»class «getSimpleName(getDtoName(e))»«parameter»«superType» {

	/** Serial UID */
	private static final long serialVersionUID = 1L;

	«FOR f:e.features»
	«compileDtoFields(f, importManager)»
	«ENDFOR»
	
	/**
	 * Constructor.
	 */
	public «getSimpleName(getDtoName(e))»() {
	}
	
	«FOR f:e.features»
	«compileDtoMethods(f, importManager)»
	«ENDFOR»
	
}
'''
	}
	
    def compileDtoFields(Feature f, ImportManager importManager) 
'''
/** 
  * «f.documentation»
  * @see {@link #«getGetterName(f)»()}
  * @see {@link #«getSetterName(f)»(«getTypeName(f.type, importManager)»)}
  */
private «getTypeName(f.type, importManager)» «f.name»;
'''

    def compileDtoMethods(Feature f, ImportManager importManager) 
'''
/** 
  * Returns the «f.name» value.
  * <p>«f.documentation»</p> 
  * @return value of «f.name»
  * @see {@link #«getSetterName(f)»(«getTypeName(f.type, importManager)»)}
  */
public «getTypeName(f.type, importManager)» «getGetterName(f)»() {
	return «f.name»;
}

/** 
  * Sets the new value for «f.name».
  * <p>«f.documentation»</p> 
  * @param «f.name» - the new value to set
  * @see {@link #«getGetterName(f)»()}
  */
public void «getSetterName(f)»(«getTypeName(f.type, importManager)» «f.name») {
	this.«f.name» = «f.name»;
}
'''
  	
	
	/**************************** BO Implementation *******************************/
	
	def compileImplementation(Entity e) ''' 
    «val importManager = new ImportManager(true)» 
    «val body = implementationBody(e, importManager)»
    package «getPackageName(getImplementationName(e))»;
    
    «FOR i:importManager.imports»
    import «i»;
    «ENDFOR»
    
    «body»
  	'''
  
  	def implementationBody(Entity e, ImportManager importManager) {
  		var String superType = null
  		var String ifSuperType = null
  		var String parameters = null
  		var String abstractOption = "";
  		var String constructorArg = getTypeName(e.newTypeRef(getDtoName(e)), importManager);
  		if (e.options.contains("abstract")) abstractOption = "abstract "
  		if (e.superTypes != null) {
  			for (s : e.superTypes) {
				if (s.identifier == 'rs.data.api.bo.ILongBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateLongBO, e.newTypeRef('T')), importManager)
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e)), importManager))
						constructorArg = "T"
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateLongBO, e.newTypeRef(getDtoName(e))), importManager)
					}
					ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
				} else if (s.identifier == 'rs.data.api.bo.IGeneralBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateBO, e.newTypeRef("K"), e.newTypeRef('T')), importManager)
						parameters = addParameter(parameters, "K extends "+getTypeName(e.newTypeRef(Serializable), importManager))
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e), e.newTypeRef("K")), importManager))
						ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e), e.newTypeRef("K")), importManager);
						constructorArg = "T"
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateBO, e.newTypeRef(Serializable), e.newTypeRef(getDtoName(e))), importManager)
						ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
					}
				} else if (s.identifier == 'rs.data.api.bo.IStringBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateStringBO, e.newTypeRef('T')), importManager)
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e)), importManager))
						constructorArg = "T"
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateStringBO, e.newTypeRef(getDtoName(e))), importManager)
					}
					ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
				} else if (entities.containsKey(s.identifier)) {
					superType = getTypeName(e.newTypeRef(getImplementationName(entities.get(s.identifier)), e.newTypeRef(getDtoName(e))), importManager)
					ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
				}
  			}
  		}
  		if (parameters != null) parameters = '<' + parameters + '>'
  		else parameters = ''
  		if (superType != null) superType = " extends "+superType
'''
/** 
  * BO Hibernate implementation for {@link «e.name»}.
  * <p>«e.documentation»</p> 
  */
public «abstractOption»class «getSimpleName(getImplementationName(e))»«parameters»«superType» implements «ifSuperType» {

	/** Serial UID */
	private static final long serialVersionUID = 1L;

	/**
	 * Constructor.
	 */
	public «getSimpleName(getImplementationName(e))»() {
		this(null);
	}

	/**
	 * Constructor.
	 * @param dto the transfer object to be used underneath
	 */
	public «getSimpleName(getImplementationName(e))»(«constructorArg» dto) {
		super(dto);
	}

	«FOR f:e.features»
	«compileImplementationMethods(f, importManager)»
	«ENDFOR»
}
'''
   	}
   	
    def compileImplementationMethods(Feature f, ImportManager importManager) 
'''
/** 
  * {@inheritDoc}
  */
@Override
public «getTypeName(f.type, importManager)» «getGetterName(f)»() {
	return getTransferObject().«getGetterName(f)»();
}

/** 
  * {@inheritDoc}
  */
@Override
public void «getSetterName(f)»(«getTypeName(f.type, importManager)» «f.name») {
	«getTypeName(f.type, importManager)» oldValue = «getGetterName(f)»();
	getTransferObject().«getSetterName(f)»(«f.name»);
	firePropertyChange(«constantName(f.name)», oldValue, «f.name»);
}
'''
  	
  	/************************** DAO Implementation ******************************/

 	def compileDaoImplementation(Entity e) ''' 
    «val importManager = new ImportManager(true)» 
    «val body = daoImplementationBody(e, importManager)»
    package «getPackageName(getDaoImplementationName(e))»;
    
    «FOR i:importManager.imports»
    import «i»;
    «ENDFOR»
    
    «body»
  	'''

  	def daoImplementationBody(Entity e, ImportManager importManager) {
  		var String superType = null
  		var String ifSuperType = null
  		var String parameters = null
  		var String abstractOption = "";
  		if (e.options.contains("abstract")) abstractOption = "abstract "
  		if (e.superTypes != null) {
  			for (s : e.superTypes) {
				if (s.identifier == 'rs.data.api.bo.ILongBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateLongDAO, e.newTypeRef('T'), e.newTypeRef("B"), e.newTypeRef('C')), importManager)
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e)), importManager))
						parameters = addParameter(parameters, "B extends "+getTypeName(e.newTypeRef(getImplementationName(e), e.newTypeRef('T')), importManager))
						parameters = addParameter(parameters, "C extends "+getTypeName(e.newTypeRef(getInterfaceName(e)), importManager))
						ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e), e.newTypeRef("C")), importManager);
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateLongDAO, e.newTypeRef(getDtoName(e)), e.newTypeRef(getImplementationName(e)), e.newTypeRef(getInterfaceName(e))), importManager)
						ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e), e.newTypeRef("C")), importManager);
					}
				} else if (s.identifier == 'rs.data.api.bo.IGeneralBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateDAO, e.newTypeRef("K"), e.newTypeRef('T'), e.newTypeRef("B"), e.newTypeRef('C')), importManager)
						parameters = addParameter(parameters, "K extends "+getTypeName(e.newTypeRef(Serializable), importManager))
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e), e.newTypeRef("K")), importManager))
						parameters = addParameter(parameters, "B extends "+getTypeName(e.newTypeRef(getImplementationName(e), e.newTypeRef("K"), e.newTypeRef('T')), importManager))
						parameters = addParameter(parameters, "C extends "+getTypeName(e.newTypeRef(getInterfaceName(e), e.newTypeRef("K")), importManager))
						ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e), e.newTypeRef("K"), e.newTypeRef("C")), importManager);
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateDAO, e.newTypeRef(Serializable), e.newTypeRef(getDtoName(e)), e.newTypeRef(getImplementationName(e)), e.newTypeRef(getInterfaceName(e))), importManager)
						ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e)), importManager);
					}
				} else if (s.identifier == 'rs.data.api.bo.IStringBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateStringDAO, e.newTypeRef('T'), e.newTypeRef("B"), e.newTypeRef('C')), importManager)
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e)), importManager))
						parameters = addParameter(parameters, "B extends "+getTypeName(e.newTypeRef(getImplementationName(e), e.newTypeRef('T')), importManager))
						parameters = addParameter(parameters, "C extends "+getTypeName(e.newTypeRef(getInterfaceName(e)), importManager))
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateStringDAO, e.newTypeRef(getDtoName(e)), e.newTypeRef(getImplementationName(e)), e.newTypeRef(getInterfaceName(e))), importManager)
					}
					ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
				} else if (entities.containsKey(s.identifier)) {
					superType = getTypeName(e.newTypeRef(getDaoImplementationName(entities.get(s.identifier)), e.newTypeRef(getDtoName(e)), e.newTypeRef(getImplementationName(e)), e.newTypeRef(getInterfaceName(e))), importManager)
					ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e)), importManager);
				}
  			}
  		}
  		if (parameters != null) parameters = '<' + parameters + '>'
  		else parameters = ''
  		if (superType != null) superType = " extends "+superType
'''
/** 
  * DAO Hibernate implementation for {@link «e.name»}.
  */
public «abstractOption»class «getSimpleName(getDaoImplementationName(e))»«parameters»«superType» implements «ifSuperType» {
}
'''
   	}
  	
 	/********************************** Factory Implementation ********************************/
  	
	def compileFactoryImplementation(FactoryDefinition f) ''' 
    «val importManager = new ImportManager(true)» 
    «val body = factoryImplementationBody(f, importManager)»
    package «getPackageName(getFactoryImplementationName(f))»;
    
    «FOR i:importManager.imports»
    import «i»;
    «ENDFOR»
    
    «body»
  	'''  	
  	
  	def factoryImplementationBody(FactoryDefinition f, ImportManager importManager) {
'''
/** 
  * Factory implementation for «getSimpleName(f.name)».
  */
public class «getSimpleName(getFactoryImplementationName(f))» extends «getTypeName(f.newTypeRef(AbstractDaoFactory), importManager)» implements «getTypeName(f.newTypeRef(getFactoryInterfaceName(f)), importManager)» {
	
	«FOR e:entities.values»
	«IF !e.options.contains('abstract')»
	/**
	  * {@inheritDoc}
	  */
	@Override
	public «getTypeName(f.newTypeRef(getDaoInterfaceName(e)), importManager)» get«e.name»Dao() {
		return getDao(«getTypeName(f.newTypeRef(getDaoInterfaceName(e)), importManager)».class);
	}
	«ENDIF»
	«ENDFOR»
}
'''
	}  	
  	
  	
  	
  	/**********************************Utilities ********************************/
  	
	def dispatch boolean isHibernate(Entity e) {
		var container = e.eContainer
		switch container {
			Entity : return isHibernate(container)
			PackageDeclaration : return isHibernate(container)
			FactoryDefinition : return isHibernate(container)
		}
		return false
	}
	
	def dispatch boolean isHibernate(FactoryDefinition f) {
		return f.options.contains('hibernate')
	}
	
	def dispatch boolean isHibernate(PackageDeclaration p) {
		var container = p.eContainer
		switch container {
			PackageDeclaration : return isHibernate(container)
			FactoryDefinition : return isHibernate(container)
		}
		return false
	}
	
}
