/*
 * generated by Xtext
 */
package rs.dsl.data.generator

import com.google.inject.Inject
import java.io.Serializable
import java.util.HashMap
import java.util.Map
import javax.annotation.Generated
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.xbase.compiler.ImportManager
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import rs.data.hibernate.bo.AbstractHibernateBO
import rs.data.hibernate.bo.AbstractHibernateLongBO
import rs.data.hibernate.bo.AbstractHibernateStringBO
import rs.data.hibernate.dao.AbstractHibernateDAO
import rs.data.hibernate.dao.AbstractHibernateLongDAO
import rs.data.hibernate.dao.AbstractHibernateStringDAO
import rs.data.impl.dto.GeneralDTO
import rs.data.impl.dto.LongDTO
import rs.data.impl.dto.StringDTO
import rs.dsl.data.dataDsl.Entity
import rs.dsl.data.dataDsl.FactoryDefinition
import rs.dsl.data.dataDsl.Feature
import rs.dsl.data.dataDsl.PackageDeclaration

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class HibernateGenerator extends AbstractDataGenerator {
	
	@Inject extension JvmTypesBuilder
	
	private Map<String, Entity> entities = new HashMap<String,Entity>()
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e: resource.allContents.toIterable.filter(Entity)) {
			entities.put(getInterfaceName(e), e)
			if (isHibernate(e)) {
				fsa.generateFile(getFilename(getDtoName(e)), e.compileDto)
				fsa.generateFile(getFilename(getImplementationName(e)), e.compileImplementation)
				fsa.generateFile(getFilename(getDaoImplementationName(e)), e.compileDaoImplementation)
				// TODO: HBM files
			}
		}
	}
	
	/**************************** DTO Implementation *******************************/
	
	def compileDto(Entity e) ''' 
	«val importManager = new ImportManager(true)» 
	«val body = dtoBody(e, importManager)»
	package «getPackageName(getDtoName(e))»;
	
	«FOR i:importManager.imports»
	import «i»;
    «ENDFOR»

	// PROTECTED REGION ID(«getProtectedRegionName(e, 'dto.imports')») ENABLED START
	// Put your imports here
	// PROTECTED REGION END

	«body»
  	'''
  
  	def dtoBody(Entity e, ImportManager importManager) {
  		var String superType = null
  		var String parameter = null
  		var String abstractOption = "";
  		if (e.options.contains("abstract")) abstractOption = "abstract "
  		if (e.superTypes != null) {
  			for (s : e.superTypes) {
				if (s.identifier == 'rs.data.api.bo.ILongBO') {
					superType = getTypeName(e.newTypeRef(LongDTO), importManager)
				} else if (s.identifier == 'rs.data.api.bo.IGeneralBO') {
					superType = getTypeName(e.newTypeRef(GeneralDTO, e.newTypeRef("K")), importManager)
					parameter = "K extends "+getTypeName(e.newTypeRef(Serializable), importManager)
				} else if (s.identifier == 'rs.data.api.bo.IStringBO') {
					superType = getTypeName(e.newTypeRef(StringDTO), importManager)
				} else if (entities.containsKey(s.identifier)) {
					superType = getTypeName(e.newTypeRef(getDtoName(entities.get(s.identifier))), importManager)
				}
  			}
  		}
  		if (parameter != null) parameter = '<' + parameter + '>'
  		else parameter = ''
  		if (superType != null) superType = " extends "+superType
'''
/** 
  * DTO implementation for {@link «getInterfaceName(e)»}.
  * <p>«e.documentation»</p> 
  */
@«getTypeName(e.newTypeRef(Generated), importManager)»("«getClass().simpleName»")
public «abstractOption»class «getSimpleName(getDtoName(e))»«parameter»«superType» {

	/** Serial UID */
	private static final long serialVersionUID = 1L;

	«FOR f:e.features»
	«compileDtoFields(f, importManager)»
	«ENDFOR»
	
	/**
	 * Constructor.
	 */
	public «getSimpleName(getDtoName(e))»() {
		// PROTECTED REGION ID(«getProtectedRegionName(e, 'dto.constructor')») ENABLED START
		// Add your own implementation here
		// PROTECTED REGION END
	}
	
	«FOR f:e.features»
	«compileDtoMethods(f, importManager)»
	«ENDFOR»
	
	// PROTECTED REGION ID(«getProtectedRegionName(e, 'dto')») ENABLED START
	// Add your own implementations here
	// PROTECTED REGION END
}
'''
	}
	
    def compileDtoFields(Feature f, ImportManager importManager) 
'''
/** 
  * «f.documentation»
  * @see {@link #«getGetterName(f)»()}
  * @see {@link #«getSetterName(f)»(«getTypeName(f.type, importManager)»)}
  */
private «getTypeName(f.type, importManager)» «getSetterArgumentName(f.name)»;
'''

    def compileDtoMethods(Feature f, ImportManager importManager) 
'''
/** 
  * Returns the «f.name» value.
  * <p>«f.documentation»</p> 
  * @return value of «f.name»
  * @see {@link #«getSetterName(f)»(«getTypeName(f.type, importManager)»)}
  */
public «getTypeName(f.type, importManager)» «getGetterName(f)»() {
	// PROTECTED REGION ID(«getProtectedRegionName(f, 'dto.getter')») ENABLED START
	// Add your own implementation here
	return «getSetterArgumentName(f.name)»;
	// PROTECTED REGION END
}

/** 
  * Sets the new value for «f.name».
  * <p>«f.documentation»</p> 
  * @param «f.name» - the new value to set
  * @see {@link #«getGetterName(f)»()}
  */
public void «getSetterName(f)»(«getTypeName(f.type, importManager)» «getSetterArgumentName(f.name)») {
	// PROTECTED REGION ID(«getProtectedRegionName(f, 'dto.setter')») ENABLED START
	// Add your own implementation here
	this.«getSetterArgumentName(f.name)» = «getSetterArgumentName(f.name)»;
	// PROTECTED REGION END
}
'''
  	
	
	/**************************** BO Implementation *******************************/
	
	def compileImplementation(Entity e) ''' 
    «val importManager = new ImportManager(true)» 
    «val body = implementationBody(e, importManager)»
    package «getPackageName(getImplementationName(e))»;
    
    // PROTECTED REGION ID(«getProtectedRegionName(e, 'impl.imports')») ENABLED START
    // Put your imports here
    // PROTECTED REGION END

    «FOR i:importManager.imports»
    import «i»;
    «ENDFOR»
    
    «body»
  	'''
  
  	def implementationBody(Entity e, ImportManager importManager) {
  		var String superType = null
  		var String ifSuperType = null
  		var String parameters = null
  		var String abstractOption = "";
  		var String constructorArg = getTypeName(e.newTypeRef(getDtoName(e)), importManager);
  		var boolean k = false
  		var boolean t = false
  		if (e.options.contains("abstract")) abstractOption = "abstract "
  		if (e.superTypes != null) {
  			for (s : e.superTypes) {
				if (s.identifier == 'rs.data.api.bo.ILongBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateLongBO, e.newTypeRef('T')), importManager)
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e)), importManager))
						constructorArg = "T"
						t = true
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateLongBO, e.newTypeRef(getDtoName(e))), importManager)
					}
					ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
				} else if (s.identifier == 'rs.data.api.bo.IGeneralBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateBO, e.newTypeRef("K"), e.newTypeRef('T')), importManager)
						parameters = addParameter(parameters, "K extends "+getTypeName(e.newTypeRef(Serializable), importManager))
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e), e.newTypeRef("K")), importManager))
						ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e), e.newTypeRef("K")), importManager);
						constructorArg = "T"
						k = true
						t = true
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateBO, e.newTypeRef(Serializable), e.newTypeRef(getDtoName(e))), importManager)
						ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
					}
				} else if (s.identifier == 'rs.data.api.bo.IStringBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateStringBO, e.newTypeRef('T')), importManager)
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e)), importManager))
						constructorArg = "T"
						t = true
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateStringBO, e.newTypeRef(getDtoName(e))), importManager)
					}
					ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
				} else if (entities.containsKey(s.identifier)) {
					superType = getTypeName(e.newTypeRef(getImplementationName(entities.get(s.identifier)), e.newTypeRef(getDtoName(e))), importManager)
					ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
				}
  			}
  		}
  		if (parameters != null) parameters = '<' + parameters + '>'
  		else parameters = ''
  		if (superType != null) superType = " extends "+superType
'''
/** 
  * BO Hibernate implementation for {@link «e.name»}.
  * <p>«e.documentation»</p> 
«IF k»  * @param <K> entity key class
«ENDIF»«IF t»  * @param <T> transfer object class for entity
«ENDIF»  */
@«getTypeName(e.newTypeRef(Generated), importManager)»("«getClass().simpleName»")
public «abstractOption»class «getSimpleName(getImplementationName(e))»«parameters»«superType» implements «ifSuperType» {

	/** Serial UID */
	private static final long serialVersionUID = 1L;

	/**
	 * Constructor.
	 */
	public «getSimpleName(getImplementationName(e))»() {
		// PROTECTED REGION ID(«getProtectedRegionName(e, 'impl.constructor.null')») ENABLED START
		// Add your own implementation here
		this(null);
		// PROTECTED REGION END
	}

	/**
	 * Constructor.
	 * @param dto the transfer object to be used underneath
	 */
	public «getSimpleName(getImplementationName(e))»(«constructorArg» dto) {
		// PROTECTED REGION ID(«getProtectedRegionName(e, 'impl.constructor.dto')») ENABLED START
		// Add your own implementation here
		super(dto);
		// PROTECTED REGION END
	}

	«FOR f:e.features»
	«compileImplementationMethods(f, importManager)»
	«ENDFOR»

	// PROTECTED REGION ID(«getProtectedRegionName(e, 'impl')») ENABLED START
	// Add your own implementations here
	// PROTECTED REGION END
}
'''
   	}
   	
    def compileImplementationMethods(Feature f, ImportManager importManager) 
'''
/** 
  * {@inheritDoc}
  */
@Override
public «getTypeName(f.type, importManager)» «getGetterName(f)»() {
	// PROTECTED REGION ID(«getProtectedRegionName(f, 'impl.getter')») ENABLED START
	// Add your own implementation here
	return getTransferObject().«getGetterName(f)»();
	// PROTECTED REGION END
}

/** 
  * {@inheritDoc}
  */
@Override
public void «getSetterName(f)»(«getTypeName(f.type, importManager)» «getSetterArgumentName(f.name)») {
	// PROTECTED REGION ID(«getProtectedRegionName(f, 'impl.setter')») ENABLED START
	// Add your own implementation here
	«getTypeName(f.type, importManager)» oldValue = «getGetterName(f)»();
	getTransferObject().«getSetterName(f)»(«getSetterArgumentName(f.name)»);
	firePropertyChange(«constantName(f.name)», oldValue, «getSetterArgumentName(f.name)»);
	// PROTECTED REGION END
}
'''
  	
  	/************************** DAO Implementation ******************************/

 	def compileDaoImplementation(Entity e) ''' 
    «val importManager = new ImportManager(true)» 
    «val body = daoImplementationBody(e, importManager)»
    package «getPackageName(getDaoImplementationName(e))»;
    
    «FOR i:importManager.imports»
    import «i»;
    «ENDFOR»
    
    // PROTECTED REGION ID(«getProtectedRegionName(e, 'dao.impl.imports')») ENABLED START
    // Put your imports here
    // PROTECTED REGION END

    «body»
  	'''

  	def daoImplementationBody(Entity e, ImportManager importManager) {
  		var String superType = null
  		var String ifSuperType = null
  		var String parameters = null
  		var String abstractOption = "";
  		var boolean k = false
  		var boolean t = false
  		var boolean c = false
  		var boolean b = false
  		if (e.options.contains("abstract")) abstractOption = "abstract "
  		if (e.superTypes != null) {
  			for (s : e.superTypes) {
				if (s.identifier == 'rs.data.api.bo.ILongBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateLongDAO, e.newTypeRef('T'), e.newTypeRef("B"), e.newTypeRef('C')), importManager)
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e)), importManager))
						parameters = addParameter(parameters, "B extends "+getTypeName(e.newTypeRef(getImplementationName(e), e.newTypeRef('T')), importManager))
						parameters = addParameter(parameters, "C extends "+getTypeName(e.newTypeRef(getInterfaceName(e)), importManager))
						ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e), e.newTypeRef("C")), importManager);
						t = true
						b = true
						c = true
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateLongDAO, e.newTypeRef(getDtoName(e)), e.newTypeRef(getImplementationName(e)), e.newTypeRef(getInterfaceName(e))), importManager)
						ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e), e.newTypeRef("C")), importManager);
					}
				} else if (s.identifier == 'rs.data.api.bo.IGeneralBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateDAO, e.newTypeRef("K"), e.newTypeRef('T'), e.newTypeRef("B"), e.newTypeRef('C')), importManager)
						parameters = addParameter(parameters, "K extends "+getTypeName(e.newTypeRef(Serializable), importManager))
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e), e.newTypeRef("K")), importManager))
						parameters = addParameter(parameters, "B extends "+getTypeName(e.newTypeRef(getImplementationName(e), e.newTypeRef("K"), e.newTypeRef('T')), importManager))
						parameters = addParameter(parameters, "C extends "+getTypeName(e.newTypeRef(getInterfaceName(e), e.newTypeRef("K")), importManager))
						ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e), e.newTypeRef("K"), e.newTypeRef("C")), importManager);
						k = true
						t = true
						b = true
						c = true
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateDAO, e.newTypeRef(Serializable), e.newTypeRef(getDtoName(e)), e.newTypeRef(getImplementationName(e)), e.newTypeRef(getInterfaceName(e))), importManager)
						ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e)), importManager);
					}
				} else if (s.identifier == 'rs.data.api.bo.IStringBO') {
					if (e.options.contains("abstract")) {
						superType = getTypeName(e.newTypeRef(AbstractHibernateStringDAO, e.newTypeRef('T'), e.newTypeRef("B"), e.newTypeRef('C')), importManager)
						parameters = addParameter(parameters, "T extends "+getTypeName(e.newTypeRef(getDtoName(e)), importManager))
						parameters = addParameter(parameters, "B extends "+getTypeName(e.newTypeRef(getImplementationName(e), e.newTypeRef('T')), importManager))
						parameters = addParameter(parameters, "C extends "+getTypeName(e.newTypeRef(getInterfaceName(e)), importManager))
						t = true
						b = true
						c = true
					} else {
						superType = getTypeName(e.newTypeRef(AbstractHibernateStringDAO, e.newTypeRef(getDtoName(e)), e.newTypeRef(getImplementationName(e)), e.newTypeRef(getInterfaceName(e))), importManager)
					}
					ifSuperType = getTypeName(e.newTypeRef(getInterfaceName(e)), importManager);
				} else if (entities.containsKey(s.identifier)) {
					superType = getTypeName(e.newTypeRef(getDaoImplementationName(entities.get(s.identifier)), e.newTypeRef(getDtoName(e)), e.newTypeRef(getImplementationName(e)), e.newTypeRef(getInterfaceName(e))), importManager)
					ifSuperType = getTypeName(e.newTypeRef(getDaoInterfaceName(e)), importManager);
				}
  			}
  		}
  		if (parameters != null) parameters = '<' + parameters + '>'
  		else parameters = ''
  		if (superType != null) superType = " extends "+superType
'''
/** 
  * DAO Hibernate implementation for {@link «e.name»}.
«IF k»  * @param <K> entity key class
«ENDIF»«IF t»  * @param <T> transfer object class for entity
«ENDIF»«IF b»  * @param <B> entity implementation class
«ENDIF»«IF c»  * @param <C> entity interface class
«ENDIF»  */
@«getTypeName(e.newTypeRef(Generated), importManager)»("«getClass().simpleName»")
public «abstractOption»class «getSimpleName(getDaoImplementationName(e))»«parameters»«superType» implements «ifSuperType» {

	// PROTECTED REGION ID(«getProtectedRegionName(e, 'dao.impl')») ENABLED START
	// Add your own implementations here
	// PROTECTED REGION END

}
'''
   	}
  	
   	
  	/**********************************Utilities ********************************/
  	
	def dispatch boolean isHibernate(Entity e) {
		if (e.options.contains('hibernate')) return true
		
		var container = e.eContainer
		switch container {
			Entity : return isHibernate(container)
			PackageDeclaration : return isHibernate(container)
			FactoryDefinition : return isHibernate(container)
		}
		return false
	}
	
	def dispatch boolean isHibernate(FactoryDefinition f) {
		return f.options.contains('hibernate')
	}
	
	def dispatch boolean isHibernate(PackageDeclaration p) {
		if (p.options.contains('hibernate')) return true
		
		var container = p.eContainer
		switch container {
			PackageDeclaration : return isHibernate(container)
			FactoryDefinition : return isHibernate(container)
		}
		return false
	}
	
}
